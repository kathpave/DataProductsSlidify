{"name":"Dataproductsslidify","tagline":"Repository to hold Slidify presentation for WiFi Latency Shiny App","body":"---\r\ntitle       : WiFi Latency\r\nsubtitle    : A Shiny App for evaluating a Sensor Network\r\nauthor      : K. Pavelock\r\njob         : Developing Data Products Coursera Class Project\r\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\r\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\r\nhitheme     : tomorrow      # \r\nwidgets     : [mathjax]       # {mathjax, quiz, bootstrap}\r\nmode        : selfcontained # {standalone, draft}\r\nknit        : slidify::knit2slides\r\n---\r\n\r\n## WiFi Latency - Introduction\r\n\r\n     Purpose: \"To evaluate WiFi Latency for a sensor network based on several network parameters\"  \r\n\r\n\r\n### Network parameters\r\n     - surveillance area\r\n     - network hub range\r\n     - wifi throughput\r\n     - message size\r\n     - number of major network transactions\r\n\r\n\r\n### Selectable parameters       \r\n     - Surveillance area (feet); \"slider bar (60 - 5280*2)\"       \r\n     - Network node range (feet); \"slider bar (25 - 200)\"\r\n     - WiFi throughput speed (Mbps); \"slider bar (30 - 100)\"\r\n\r\n--- \r\n\r\n## WiFi Latency - Notes/Assumptions\r\n\r\n- Average building area is 760 feet; Average area for a small city is 2 miles\r\n- WiFi throughput for for 802.11n is 40-50 Mbps. From http://www.speedguide.net/faq/\r\n- Message sizes (kilobytes-KB): small-50KB, medium-500KB, large-5000KB\r\n- Requires 3 sensors per node; Alert Sensor with two Confirming Sensors\r\n- Required main Network Messaging Transactions\r\n\r\n     - Sensor discovery initiation via a status request;\r\n     - Sensor discovery response via a status message;\r\n     - Sensor(s) alert via alert message;\r\n     - Detailed detection data request;\r\n     - Detailed detection data transmittal;\r\n     - Additional detailed detection data request;\r\n\r\n---\r\n\r\n## WiFi Latency - Formula\r\n\r\nNetwork Processing Time (NP) is measured as Network Delay. \r\n\r\nTotal Network Processing time $ NP_T $ is the sum of all NPs for each transaction:\r\n\r\n$$ NP_T = \\sum_{t=1}^n NP_t $$\r\n$ n $ is the number of main transactions and $ NP_t $ is the network processing time for one major transaction:\r\n\r\n$$ NP_t = NL * \\left( d_r + d_p + d_c \\right) $$\r\n$ NL $ is the number of nodes (network routers + 1)\r\n- Transmission Delay $ d_r $ average message size /Rate (WiFi Speed)\r\n- Propagation Delay $ d_p $ distance/wave propagation speed. WiFi wave propagation speed = speed of light (186,000 miles per second)\r\n- Processing Delay $ d_c $  time for routers to process packet headers.  This is negligible (set to 0)\r\n\r\n---\r\n\r\n## WiFi Latency - Outputs\r\n\r\nA graph (plot) is displayed showing the latency versus number of sensors.  Calculated values are displayed as text labels:  Number of sensors, Surveillance area (Distance), and Latency.  The sample plot below is a replica from the Shiny App with WiFi speed of 45 Mbps and 100 ft hub range.\r\n- Try it for yourself.  My WiFi Latency App is deployed at https://kathpave.shinyapps.io/Shiny/\r\n```{r echo=FALSE}\r\ndist.data <- seq(60,5280*2, 100) #min = 60, max = 5280*2, step = 100\r\n#Transmission Delay \r\n#Message Size (KB)\r\nMsg.data <- c(50,500,5000)\r\nMsgMB <- Msg.data * 0.001 #convert to MB\r\nsm<-1 #small message index\r\nmed <- 2 #medium message index\r\nlg <- 3 #large message index\r\nwifiMBps <- 45 * 0.125 #convert bits to Bytes\r\ndtrans <- (MsgMB/wifiMBps) * 1000 #convert seconds to ms\r\n#Propagation Delay\r\nspeedOfLight <- 186000 * 5280 # convert to feet per second\r\ndprop <- (dist.data/speedOfLight) * 1000 # convert to ms\r\n#Processing Delay\r\ndproc <- 0 #time it takes routers to process packet headers (negligible)\r\n#number of routers \r\nHubs <- 100 #node range in feet \r\nNL <- round(dist.data/Hubs,0) + 1 # the number of nodes we need\r\nnumSensors <- (NL-1)*3 #sensors per node\r\n# calculate Network Delay for each main transaction\r\nNP1 <- NL * (dtrans[sm] + dprop + dproc) #Sensor Discovery (small message)\r\nNP2 <- NL * (dtrans[med] + dprop + dproc) #Sensor Health Status (medium)\r\nNP3 <- NP1 # Sensor alerts (small message)\r\nNP4 <- NP1 # Request data from Sensors (small message)\r\nNP5 <- NL * (dtrans[lg] + dprop + dproc) #Sensor data (large message)\r\nNP6 <- NP1 # Request additional data from Sensors (small message)\r\nDtotal <- NP1 + NP2 + NP3 + NP4 + NP5 + NP6\r\ncurrentDistance <- 760\r\nindex <- match(currentDistance,dist.data) #index for selected distance\r\npar(fig=c(0, 1, .2, .8)) # make the plot fit on the page\r\nplot(numSensors,Dtotal/1000, xlab='# Sensors', \r\n     ylab=\"Latency (seconds)\", col='lightblue',\r\n     main='Sensor System WiFi Latency')\r\nlines(c(numSensors[index],numSensors[index]), c(0,300),\r\n      col=\"blue\",lwd=3)\r\n#calculate placement of text labels\r\nyTextValue <- round(mean(Dtotal/1000),0)\r\nxTextValue <- round(max(numSensors)*0.8,0)\r\n# display some parameters\r\ntext(xTextValue, yTextValue+10, paste(\"# Sensors = \", numSensors[index]))\r\ntext(xTextValue,yTextValue, paste(\"Distance = \", currentDistance, \" feet\"))\r\ntext(xTextValue, yTextValue-10, paste(\"Latency = \", round(Dtotal[index]/1000,0),\" seconds\"))\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}